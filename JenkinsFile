pipeline {
    agent { node { label 'jenkins-slave' } }
    environment {
        webRegistry = "salomirao/pythonapp-web"
        dbRegistry = "salomirao/pythonapp-db"
        GOCACHE = "/tmp"
    }
    stages{
        stage('test pipeline') {
            /*sh(script: """
            echo "hello"
            git clone https://github.com/sr5097/Kube-WebAppDeployment.git
            cd ./app

            docker build . -t test
            """)*/
            steps{
                sh "git clone https://github.com/sr5097/Kube-WebAppDeployment.git"
                sh "cd ./app"
                sh "docker build . -t name"
            }
        }
    }
    /*stages {
        stage('Build') {
            /*agent { 
                docker { 
                    image 'golang' 
                }
            }
            steps {
                /* Create our project directory.
                sh 'cd ${GOPATH}/src'
                sh 'mkdir -p ${GOPATH}/src/hello-world'
                // Copy all files in our Jenkins workspace to our project directory.                
                sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'
                // Build the app.
                sh 'go build' 

                sh "cd ${WORKSPACE}/app/"
                sh "docker build ."             
            }     
        }
        /*stage('Test') {
            agent { 
                docker { 
                    image 'golang' 
                }
            }
            steps {                 
                // Create our project directory.
                sh 'cd ${GOPATH}/src'
                sh 'mkdir -p ${GOPATH}/src/hello-world'
                // Copy all files in our Jenkins workspace to our project directory.                
                sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'
                // Remove cached test results.
                sh 'go clean -cache'
                // Run Unit Tests.
                sh 'go test ./... -v -short'            
            }
        }
        stage('Publish') {
            environment {
                registryCredential = 'dockerhub'
            }
            steps{
                script {
                    def appimage = docker.build registry + ":$BUILD_NUMBER"
                    docker.withRegistry( '', registryCredential ) {
                        appimage.push()
                        appimage.push('latest')
                    }
                }
            }
        }
        stage ('Deploy') {
            steps {
                script{
                    def image_id = registry + ":$BUILD_NUMBER"
                    sh "ansible-playbook  playbook.yml --extra-vars \"image_id=${image_id}\""
                }
            }
        }*/
    }